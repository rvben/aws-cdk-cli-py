name: Publish AWS CDK Python Wrapper

on:
  repository_dispatch:
    types: [aws-cdk-release]
  workflow_dispatch:
    inputs:
      version:
        description: 'The version of AWS CDK to wrap'
        required: true
        type: string

jobs:
  security-checks:
    name: Security verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      # Automatically extract CDK version from event if triggered by repository_dispatch
      - name: Set CDK version (from dispatch)
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "CDK_VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_ENV
        shell: bash

      # Use manually provided version if triggered by workflow_dispatch
      - name: Set CDK version (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "CDK_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        shell: bash

      - name: Verify CDK version format
        run: |
          if ! [[ "${{ env.CDK_VERSION }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format: ${{ env.CDK_VERSION }}"
            exit 1
          fi
          echo "Version format verified: ${{ env.CDK_VERSION }}"

      - name: Verify against npm registry
        run: |
          NPM_VERSION=$(npm view aws-cdk version)
          if [ "$NPM_VERSION" != "${{ env.CDK_VERSION }}" ]; then
            echo "Warning: Version mismatch. Requested: ${{ env.CDK_VERSION }}, npm registry: $NPM_VERSION"
            
            # If this is automatic release, fail if versions don't match
            if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
              exit 1
            fi
            
            # For manual release, continue with warning
            echo "Continuing with requested version as this is a manual workflow trigger"
          else
            echo "Version verified against npm registry: ${{ env.CDK_VERSION }}"
          fi

  build-and-publish:
    name: Build for Python ${{ matrix.python-version }} on ${{ matrix.platform.name }}
    needs: security-checks
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        python-version: ["3.10"]
        platform:
          - os: ubuntu-latest
            name: linux
          - os: windows-latest
            name: windows
          - os: macos-latest
            name: macos
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine pytest

      # Get CDK version from the security checks job
      - name: Set CDK version (from dispatch)
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "CDK_VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_ENV
        shell: bash

      - name: Set CDK version (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "CDK_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        shell: bash

      - name: Update version files
        run: |
          # Get current date and git commit hash
          import os
          import datetime
          import subprocess
          
          # Get build info
          build_date = datetime.datetime.now().strftime("%Y-%m-%d")
          build_timestamp = datetime.datetime.now().isoformat()
          
          try:
              build_commit = subprocess.check_output(["git", "rev-parse", "HEAD"], text=True).strip()
          except:
              build_commit = "unknown"
          
          # Update version.py file
          version_content = f'''"""Version information for aws-cdk package.

This file is automatically updated during the build process to match
the version of the AWS CDK CLI being bundled.
"""

__version__ = "{os.environ.get('CDK_VERSION')}"  # AWS CDK version

# Build information
__build_date__ = "{build_date}"
__build_timestamp__ = "{build_timestamp}"
__build_commit__ = "{build_commit}"

# Bundled software versions
__node_version__ = "18.16.0"  # Version of Node.js bundled with this package
__cdk_version__ = __version__  # Version of AWS CDK bundled (same as package version)

# Component licenses
__license__ = "MIT"  # License for the Python wrapper package
__cdk_license__ = "Apache-2.0"  # License for AWS CDK
__node_license__ = "MIT"  # License for Node.js

def get_version_info():
    """Return version information as a dictionary."""
    return {{
        "version": __version__,
        "build_date": __build_date__,
        "build_timestamp": __build_timestamp__,
        "build_commit": __build_commit__,
        "node_version": __node_version__,
        "cdk_version": __cdk_version__,
        "license": __license__,
        "cdk_license": __cdk_license__,
        "node_license": __node_license__
    }}
'''
          
          with open('aws_cdk/version.py', 'w') as f:
              f.write(version_content)
          
          # Update pyproject.toml
          if os.path.exists('pyproject.toml'):
              with open('pyproject.toml', 'r') as f:
                  content = f.read()
              
              import re
              # Add version line after name if it doesn't exist
              if 'version = ' not in content:
                  content = re.sub(r'(name = .*)', r'\1\nversion = "{0}"'.format(os.environ.get('CDK_VERSION')), content)
              else:
                  content = re.sub(r'version = .*', r'version = "{0}"'.format(os.environ.get('CDK_VERSION')), content)
              
              with open('pyproject.toml', 'w') as f:
                  f.write(content)
          
          # Also update setup.py if it exists
          if os.path.exists('setup.py'):
              with open('setup.py', 'r') as f:
                  content = f.read()
              
              # Update version
              import re
              content = re.sub(r'version\s*=\s*[\'"][^\'"]*[\'"]', r'version="{0}"'.format(os.environ.get('CDK_VERSION')), content)
              
              with open('setup.py', 'w') as f:
                  f.write(content)
          
          print(f"Updated version files to {os.environ.get('CDK_VERSION')}")
        shell: python

      - name: Build package for ${{ matrix.platform.name }}
        run: python -m build
      
      - name: Install built package for testing
        run: |
          python -m pip install -e .

      - name: Run tests
        run: |
          pytest tests/ -v

      - name: Run security scan on binaries
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          # Install clamav for virus scanning
          sudo apt-get update
          sudo apt-get install -y clamav
          sudo freshclam
          
          # Scan the distribution files
          clamscan --recursive --infected dist/ || echo "Virus scan warning"

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.platform.name }}
          path: dist/
          retention-days: 5

  publish:
    name: Publish to PyPI
    needs: build-and-publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          
      # Download all platform artifacts
      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-linux
          path: dist/
          
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-windows
          path: dist/
          
      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-macos
          path: dist/
          
      - name: List all artifacts
        run: find dist -type f
        
      - name: Verify distributions
        run: |
          # Verify that we have .whl files for all platforms
          if ! ls dist/*-manylinux*.whl 1> /dev/null 2>&1; then
            echo "Error: Missing Linux wheel file"
            exit 1
          fi
          
          if ! ls dist/*-win*.whl 1> /dev/null 2>&1; then
            echo "Error: Missing Windows wheel file"
            exit 1
          fi
          
          if ! ls dist/*-macosx*.whl 1> /dev/null 2>&1; then
            echo "Error: Missing macOS wheel file"
            exit 1
          fi
          
          echo "All platform wheels verified"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          
  create-github-release:
    name: Create GitHub Release
    needs: publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set CDK version (from dispatch)
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "CDK_VERSION=${{ github.event.client_payload.version }}" >> $GITHUB_ENV
        shell: bash

      - name: Set CDK version (manual)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "CDK_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        shell: bash
      
      # Download all platform artifacts for the release
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts
          
      - name: Create release notes
        run: |
          cat > release-notes.md << EOL
          # AWS CDK Python Wrapper v${{ env.CDK_VERSION }}
          
          This release wraps AWS CDK v${{ env.CDK_VERSION }}.
          
          ## Installation
          
          ```bash
          # Using pip
          pip install aws-cdk==${{ env.CDK_VERSION }}
          
          # Using uv
          uv pip install aws-cdk==${{ env.CDK_VERSION }}
          ```
          
          ## Platform Support
          
          - Windows (x86_64)
          - macOS (Intel and Apple Silicon)
          - Linux (x86_64 and ARM64)
          
          ## Features
          
          - Zero npm dependency - No need to install Node.js or npm separately
          - Bundled Node.js v18.16.0
          - Offline caching support
          - License compliance with both Apache 2.0 (AWS CDK) and MIT (Node.js)
          EOL

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CDK_VERSION }}
          release_name: AWS CDK Python Wrapper v${{ env.CDK_VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false 
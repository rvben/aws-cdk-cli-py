name: Update Package on CDK Release

on:
  repository_dispatch:
    types: [aws-cdk-release]
  schedule:
    # Fallback: Run weekly to check for updates
    - cron: '0 0 * * 0'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build requests
      
      - name: Get latest npm version
        id: npm-version
        run: |
          NPM_VERSION=$(npm view aws-cdk version)
          echo "Latest aws-cdk version: $NPM_VERSION"
          echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
      
      - name: Get current package version
        id: package-version
        run: |
          # Extract version from setup.py if it exists
          if grep -q "version=" setup.py; then
            CURRENT_VERSION=$(grep -oP "version\s*=\s*['\"]([^'\"]+)" setup.py | cut -d'"' -f2 | cut -d"'" -f2)
          else
            CURRENT_VERSION="0.0.0"
          fi
          echo "Current package version: $CURRENT_VERSION"
          echo "package_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Check if update needed
        id: check-update
        run: |
          NPM_VERSION="${{ steps.npm-version.outputs.npm_version }}"
          CURRENT_VERSION="${{ steps.package-version.outputs.package_version }}"
          
          # Compare versions 
          if [ "$NPM_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Update needed from $CURRENT_VERSION to $NPM_VERSION"
            echo "update_needed=true" >> $GITHUB_OUTPUT
          else
            echo "No update needed, versions match: $CURRENT_VERSION"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update version in files
        if: steps.check-update.outputs.update_needed == 'true'
        run: |
          NEW_VERSION="${{ steps.npm-version.outputs.npm_version }}"
          
          # Update version in setup.py if it exists
          if [ -f "setup.py" ]; then
            sed -i "s/version\s*=\s*['\"][^'\"]*['\"]$/version=\"$NEW_VERSION\",/" setup.py
          fi
          
          # Create or update version file
          echo "__version__ = \"$NEW_VERSION\"" > aws_cdk_bin/version.py
          
          echo "Updated version to $NEW_VERSION"

  build-packages:
    needs: check-for-updates
    if: needs.check-for-updates.outputs.update_needed == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: darwin
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine build requests
      
      - name: Build package
        run: |
          python -m build
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.platform }}
          path: dist/
          retention-days: 7

  test-and-publish:
    needs: build-packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Prepare distribution files
        run: |
          mkdir -p dist
          cp artifacts/dist-*/* dist/
      
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
      
      - name: Test package
        run: |
          twine check dist/*
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-for-updates.outputs.npm_version }}
          name: Release v${{ needs.check-for-updates.outputs.npm_version }}
          body: |
            Updated aws-cdk Python package to match npm version ${{ needs.check-for-updates.outputs.npm_version }}.
            
            This release automatically tracks the official AWS CDK CLI release.
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 